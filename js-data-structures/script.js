// //generate fibonacci series
// function genFib(n){
	var arr = [], result = [];
	for(var i = 0; i < n; i++){
		arr.push(i);
		//console.log(result);
	}
	for(var x in arr){
	  if(x >= 2){
	    result[x] = result[x-2] + result[x-1];
	  }else{
	    result[x] = arr[x];
	  }
	  
	}
	console.log(arr);
	console.log(result);
// }
// genFib(40);
//164521389


//recursively generate an array till specified number
//(to test recursive function)
// var arr = [];
// 	function recGet(i){
// 		if(i < 5){
// 			arr.push(i);
// 			return recGet(i+1);
// 		}else{
// 			return arr;
// 		}
// 		// console.log(arr);
		
// 	}

// console.log(recGet(1));


//generate fibonacci using recursion
var arr = [];
var result = [];
var numbers = [];
var count = 0;

//the array of numbers generated will be passed here to 
//generate fibonacci
//k --> startRangeOfFibonacci
//n --> endRangeOfFibonacci
  function getFib(numbers, k, n){
    count++;
    if((k >= 2) && (count < n+1)){
      result[k] = result[k-1] + result[k-2];

      return getFib(numbers, k+1, n);
    }else{
        if(count === n+1){//when ever the looping of this function reaches the last element's 
          //index of array(array generated by recGet), return the result available in the 'result'
          //console.log (result);
          return result;
      }
      result[k] = numbers[k];
      return getFib(numbers, k+1, n);
    
    }
  }
 
//generates array of numbers first till the given number
//i --> startRangeOfArray
//n --> endRangeOfFibonacci 
function recGet(i, n){
  if(i < n){
    arr.push(i);
    return recGet(i+1, n);
  }else{
    //console.log(arr);
    numbers = arr;
    console.log(numbers);
    return getFib(numbers, 0, n);
  }
}

console.log(recGet(0, 9));