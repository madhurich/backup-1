> npm install -g typescript
> npm install -g typings
> go to the folder adn run "npm install"
> npm start
------
section-2
After creating a service for a specific purpose here 'own.service'
we are including it in the 'own.component' with the help of constructor.

constructor(){
	new ownService;
} 

but when we do this the 'own.component' is bound to 'own.service' and it gets difficult to unit test i.e we wont be able to mock 
the api to test the service, hence we should not instantiate this serivce like this instead we need to do the following process.

constructor(ownService: OwnService){//(serviceName: ServiceType) type is here the same name but in CallCase
	this.hobbies = ownService.getHobbies();
}

So our component is no longer tightly coupled to the service
and we should also let our component know that we are using this service, so we need to inject this using the property called
'providers' inside the decorator and include the service 'OwnService'

providers: [OwnService]
----
We can divide our app into modules, now we have 'app' and we have component in it, we can modify this, by having 'appModule'
and having multiple components inside of this 'appModule' now when we do this we dont have to include the services into each
particular component inside of 'appModule' instead we inclde them in the 'providers' property of the 'appModule' just ONCE and
this will be globally available to all the modules or components inside of 'appModule'. (New Version of angular)
----------
to create a directive
1. import the 'Directive' from 'angular'
2. set the meta data for Directive, that has selector, here we are using the directive as an attribute
thats the reason while defining the selector we need square braces.
3. The host property specifies which method names we want to use for original 'blur' and 'focus' methods
4. in the consturctor we are using 'ElementRef' to refer to the host element that uses this particular 
directive and 'Renderer' to change the host element 

import {Directive, ElementRef, Renderer} from 'anguar2/core';

@Directive({
	selector: '[autoGrow]',
	host: {
		'(focus)' : 'onFocus()',
		'(blur) : 'onBlur()'
	}
})
export class AutoGrowDirective{
	constructor(el: ElementRef, renderer: Renderer){

	}
	onFocus(){
		this.renderer.setElementStyle(this.el.nativeElementStyle, 'width', '300');
	}
	onBlur(){
		this.renderer.setElementStyle(this.el.nativeElementStyle, 'width', '100');
	}
}
----
import {Directive, ElementRef, Renderer} from 'angular2/core';
@Directive({
	selector: '[attributeName]',
	host: {
		'(methodName)': '(customMethodName1)',
		'(methodName)': '(customMethodName2)'
	}
})

export class DirectiveName{
	constructor(el: ElementRef, renderer: Renderer){

	}

	customMethodName1(){
		this.Renderer.setElementStyle(this.el.nativeElement, 'width', 'size');
	}
	customMethodName2(){
		this.Renderer.setElementStyle(this.el.nativeElement, 'width', 'size');
	}
}

and include this directive in another component 
> using inport at the top
> in the meta data of the component, within 'directives' property mention this directive's
class Name, here we have 'DirectiveName' as the name, so it should be

directives: [DirectiveName]
-----------
Property binding

We have all these to employ binding in Angular2
<h1>{{title}}</h1>
<h1 [textContent]="title"></h1>
<img [src]="url"/>
<img src="{{url}}"/>
<img bind-src="url"/>
----
class binding
we can add conditional classes based on a value in the component to the view.
-----
to duplicate a line in the code
go the line which you want to duplicate, put hte cursor anywhere on the line and press shift+Alt+down arrow
----
[(ngModel)]="title"
actually we dont really have tow way data binding, in Angular2, in Angualr 2 we have one directional flow implemented from 
'flux' and here we implement two way using the syntax of both property and event binding
'[]' square braces represent property binding and '()' represents event binding, so when we combine
both it will be two way data binding, binding both properties and events.

if we dont use this, to have two way data binding, we need to write the complete syntax for both proeprty and event binding
<input type="text" [value]="nameInComponent" (click)="nameInComponent = $event.target.value"/>

to clear that value inside of 'nameInComponent' we can do 
(click)="nameInComponent=''"

Now if we use [(ngModel)]="nameInComponent" thats it must be added to the input

or we can also do bindon-ngModel="nameInComponent"
----------
now when we click star it goes to black, when again we open the application it goes to initial state, to avoid that
we need to create a public API for our private variable 'isActive' inside of 'starComponent' to do that import {Input}
and mention the Input decorator infront of the variable name where you want to use publicly in  the app.

import {Input} from 'angular2/core';

@Input() isActive = true;
now this 'isActive' is available to use for the entire appComponent.

Now you can use 'isActive' variable inside of appComponent.

> when we have more number of inputs that are to be accessed as public we can also specify them in an array format in
the meta data of the component.

inputs: ['isActive']

here yu can also specify an altrenative name to use in the 'appComponent' istead of 'isActive'

by sepcifying 
inputs: ['isActive: is-active'] (or)
@Input('is-active') isActive = false;
------
Output properties
now when we want to emit an event when we click star then we need Output properties
ot make that event available to the 'consumer component' 'appComponent' we need to decorate it with Output 
and declare that as an event Emitter now this event declared here is available(since it has an Output decorator) to the 'appComponent'

When during the emision if we want to emit any new data we can pass that as an object
inside of 'emit' method
import {Output} from 'angular2/core';

@Output() eventName = new EventEmitter();
now inside the event handler
onClick(){
	this.change.emit({newValue: 'someval'});
	//when ever 'change' event is emitted, emit that event with the object that has newVal
}

this emitted event inside of'starComponent' can be caught in 'appComponent' by specifying the 'eventName' we specified here
in 'starComponent' as event

like
inside of app
<star (eventNameYouUsed)="customEventName($event)"></star>
now this $event has an object that has this 'newValue'
---------
we can include templates within a cpmponent, by sepcifying the relative path.
templateUrl :'app/name.component.html'

we can include the inline or external styles,

styles: [``] //specifies inline styles
stylesUrl: '' //specifies external style

---------------
Here when we do stylesUrl or templateUrl angular will do an extra HTTP request for the first time it sees it, this can
be seen under 'Network' tab in chrome developer tools and later its cached by the browser and the cached result will be
used without actually making the request for the file.
Same happens with 'stylesUrl'
-----------

>Styles in Angular2 are private to the component itslef and they are not available to it's consumer component here
'appComponent' though it has the same element

>when we have same element, that has a style specified in a component which is also in its consumer component,
in the DOM, the component specific style element will have its own attribute 'ome randomly generated name' by angular2,
now it's style will be applied ONLY when agular sees the matching element and ALSO the 'attribute' generated by angular2.
since the consumer component wil not have the same attribute name generated to the same element, that style will not be applied
to its consumer here 'appComponent' but will be applied to the inner component ex: starComponent

---------------
YOU NEED TO READ THIS 
https://www.sitepoint.com/angular-2-components-inputs-outputs/
https://www.technicaldiary.com/difference-angular-1-vs-angular-2/
https://devblast.com/b/differences-angular-1-x-angular-2
-------
ngIf="courses.length > 0"
[hidden]="courses.length > 0"
The main difference between ngIf and hidden is that when we use [hidden]
it will be present in the DOM but will not be visible, but if we use ngIf
it will NOT be present in the DOM untill unless its value is true.
> Using ngIf is prefereable when we have more number of components to be rendered
> But if there's a case like every time switching happens then ngIf may not be useful

import {Component} from 'angular2/core';

@Component({
	selector: 'courses',
	template: `
	<div ngIf="courses.length > 0">
		<ul *ngFor="#course of courses">
			<li>{{course}}</li>
		</ul>
	</div>
	<div ngIf="courses.length == 0">
		<p>Not yet</p>
	</div>

	<h3>Using hidden</h3>
	<div [hidden]="courses.length == 0">
		<ul *ngFor="#course of courses">
			<li>{{course}}</li>
		</ul>
	</div>
	<div [hidden]="courses.length > 0">
		<p>Not yet</p>
	</div>	
	`
})

export class CoursesComponent{
	courses = [];
}
--------------------
switch component

import {Component} from 'angular2/core';

@Component({
	selector: 'switch',
	template: `
		<ul class="nav nav-pills">
			<li (click)="tab = 'book'">book</li>
			<li (click)="tab = 'pen'">Pen</li>
		</ul>
		<div [tab]>
			<div [ngSwitchWhen]="'book'">
				book content
			</div>
			<div [ngSwitchWhen]="'pen'">
				pen content
			</div>
		</div>
	`
})

export class SwitchComponent{
	tab = 'book';
}
